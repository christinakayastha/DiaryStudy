{"version":3,"sources":["../scripts/firebase.js"],"names":["window","friendlyPix","Firebase","POSTS_PAGE_SIZE","USER_PAGE_POSTS_PAGE_SIZE","COMMENTS_PAGE_SIZE","constructor","database","firebase","storage","auth","firebaseRefs","cancelAllSubscriptions","forEach","ref","off","subscribeToComments","postId","callback","latestCommentId","_subscribeToFeed","getComments","_getPaginatedFeed","subscribeToGeneralFeed","latestPostId","getPosts","subscribeToHomeFeed","currentUser","uid","getHomeFeedPosts","subscribeToUserFeed","getUserFeedPosts","uri","latestEntryId","fetchPostDetails","feedRef","orderByKey","startAt","on","feedData","key","val","once","then","postData","push","pageSize","earliestEntryId","console","log","endAt","limitToLast","data","entries","nextPage","entryIds","Object","keys","length","nextPageStartingId","shift","queries","map","getPostData","Promise","all","results","deleteOps","result","deleteFromFeed","startHomeFeedLiveUpdaters","followingRef","followingData","followedUid","followedUserPostsRef","String","updates","update","followedUserId","updateHomeFeeds","following","updateOperations","lastSyncedPostId","searchUsers","searchString","maxResults","latinize","toLowerCase","query","orderByChild","limitToFirst","reversedQuery","people","userIds","userId","name","_search_index","full_name","reversedName","reversed_full_name","startsWith","saveUserData","imageUrl","displayName","searchFullName","searchReversedFullName","split","reverse","join","e","error","updateData","profile_picture","registerToUserLike","likesRef","updateLike","value","set","ServerValue","TIMESTAMP","addComment","commentText","commentObject","text","timestamp","Date","now","author","photoURL","uploadNewPic","pic","thumb","fileName","picRef","metadata","contentType","type","picUploadTask","put","snapshot","totalBytes","url","downloadURLs","catch","thumbRef","tumbUploadTask","urls","newPostKey","full_url","thumb_url","full_storage_uri","toString","thumb_storage_uri","toggleFollowUser","follow","lastPostId","post","registerToFollowStatusUpdate","followStatusRef","loadUserProfile","registerForLikesCount","likesCallback","numChildren","registerForCommentsCount","commentsCallback","commentsRef","registerForFollowersCount","followersCallback","followersRef","registerForFollowingCount","followingCallback","getFollowingProfiles","followingUids","fetchProfileDetailsOperations","followingUid","profiles","registerForPostsCount","postsCallback","userPostsRef","deletePost","picStorageUri","thumbStorageUri","updateObj","deleteFromDatabase","deletePicFromStorage","refFromURL","delete","deleteThumbFromStorage","remove","registerForPostsDeletion","deletionCallback","postsRef"],"mappings":"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","file":"firebase.js","sourcesContent":["/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nwindow.friendlyPix = window.friendlyPix || {};\n\n/**\n * Handles all Firebase interactions.\n */\nfriendlyPix.Firebase = class {\n  /**\n   * Number of posts loaded initially and per page for the feeds.\n   * @return {number}\n   */\n  static get POSTS_PAGE_SIZE() {\n    return 5;\n  }\n\n  /**\n   * Number of posts loaded initially and per page for the User Profile page.\n   * @return {number}\n   */\n  static get USER_PAGE_POSTS_PAGE_SIZE() {\n    return 6;\n  }\n\n  /**\n   * Number of posts comments loaded initially and per page.\n   * @return {number}\n   */\n  static get COMMENTS_PAGE_SIZE() {\n    return 3;\n  }\n\n  /**\n   * Initializes this Firebase facade.\n   * @constructor\n   */\n  constructor() {\n    // Firebase SDK.\n    this.database = firebase.database();\n    this.storage = firebase.storage();\n    this.auth = firebase.auth();\n\n    // Firebase references that are listened to.\n    this.firebaseRefs = [];\n  }\n\n  /**\n   * Turns off all Firebase listeners.\n   */\n  cancelAllSubscriptions() {\n    this.firebaseRefs.forEach(ref => ref.off());\n    this.firebaseRefs = [];\n  }\n\n  /**\n   * Subscribes to receive updates from a post's comments. The given `callback` function gets\n   * called for each new comment to the post with ID `postId`.\n   *\n   * If provided we'll only listen to comments that were posted after `latestCommentId`.\n   */\n  subscribeToComments(postId, callback, latestCommentId) {\n    return this._subscribeToFeed(`/comments/${postId}`, callback, latestCommentId, false);\n  }\n\n  /**\n   * Paginates comments from the post with ID `postId`.\n   *\n   * Fetches a page of `COMMENTS_PAGE_SIZE` comments from the post.\n   *\n   * We return a `Promise` which resolves with an Map of comments and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getComments(postId) {\n    return this._getPaginatedFeed(`/comments/${postId}`,\n        friendlyPix.Firebase.COMMENTS_PAGE_SIZE, null, false);\n  }\n\n  /**\n   * Subscribes to receive updates to the general posts feed. The given `callback` function gets\n   * called for each new post to the general post feed.\n   *\n   * If provided we'll only listen to posts that were posted after `latestPostId`.\n   */\n  subscribeToGeneralFeed(callback, latestPostId) {\n    return this._subscribeToFeed('/posts/', callback, latestPostId);\n  }\n\n  /**\n   * Paginates posts from the global post feed.\n   *\n   * Fetches a page of `POSTS_PAGE_SIZE` posts from the global feed.\n   *\n   * We return a `Promise` which resolves with an Map of posts and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getPosts() {\n    return this._getPaginatedFeed('/posts/', friendlyPix.Firebase.POSTS_PAGE_SIZE);\n  }\n\n  /**\n   * Subscribes to receive updates to the home feed. The given `callback` function gets called for\n   * each new post to the general post feed.\n   *\n   * If provided we'll only listen to posts that were posted after `latestPostId`.\n   */\n  subscribeToHomeFeed(callback, latestPostId) {\n    return this._subscribeToFeed(`/feed/${this.auth.currentUser.uid}`, callback, latestPostId,\n        true);\n  }\n\n  /**\n   * Paginates posts from the user's home feed.\n   *\n   * Fetches a page of `POSTS_PAGE_SIZE` posts from the user's home feed.\n   *\n   * We return a `Promise` which resolves with an Map of posts and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getHomeFeedPosts() {\n    return this._getPaginatedFeed(`/feed/${this.auth.currentUser.uid}`,\n        friendlyPix.Firebase.POSTS_PAGE_SIZE, null, true);\n  }\n\n  /**\n   * Subscribes to receive updates to the home feed. The given `callback` function gets called for\n   * each new post to the general post feed.\n   *\n   * If provided we'll only listen to posts that were posted after `latestPostId`.\n   */\n  subscribeToUserFeed(uid, callback, latestPostId) {\n    return this._subscribeToFeed(`/people/${uid}/posts`, callback,\n        latestPostId, true);\n  }\n\n  /**\n   * Paginates posts from the user's posts feed.\n   *\n   * Fetches a page of `USER_PAGE_POSTS_PAGE_SIZE` posts from the user's posts feed.\n   *\n   * We return a `Promise` which resolves with an Map of posts and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getUserFeedPosts(uid) {\n    return this._getPaginatedFeed(`/people/${uid}/posts`,\n        friendlyPix.Firebase.USER_PAGE_POSTS_PAGE_SIZE, null, true);\n  }\n\n  /**\n   * Subscribes to receive updates to the given feed. The given `callback` function gets called\n   * for each new entry on the given feed.\n   *\n   * If provided we'll only listen to entries that were posted after `latestEntryId`. This allows to\n   * listen only for new feed entries after fetching existing entries using `_getPaginatedFeed()`.\n   *\n   * If needed the posts details can be fetched. This is useful for shallow post feeds.\n   * @private\n   */\n  _subscribeToFeed(uri, callback, latestEntryId = null, fetchPostDetails = false) {\n    // Load all posts information.\n    let feedRef = this.database.ref(uri);\n    if (latestEntryId) {\n      feedRef = feedRef.orderByKey().startAt(latestEntryId);\n    }\n    feedRef.on('child_added', feedData => {\n      if (feedData.key !== latestEntryId) {\n        if (!fetchPostDetails) {\n          callback(feedData.key, feedData.val());\n        } else {\n          this.database.ref(`/posts/${feedData.key}`).once('value').then(\n              postData => callback(postData.key, postData.val()));\n        }\n      }\n    });\n    this.firebaseRefs.push(feedRef);\n  }\n\n  /**\n   * Paginates entries from the given feed.\n   *\n   * Fetches a page of `pageSize` entries from the given feed.\n   *\n   * If provided we'll return entries that were posted before (and including) `earliestEntryId`.\n   *\n   * We return a `Promise` which resolves with an Map of entries and a function to the next page or\n   * `null` if there is no next page.\n   *\n   * If needed the posts details can be fetched. This is useful for shallow post feeds like the user\n   * home feed and the user post feed.\n   * @private\n   */\n  _getPaginatedFeed(uri, pageSize, earliestEntryId = null, fetchPostDetails = false) {\n    console.log('Fetching entries from', uri, 'start at', earliestEntryId, 'page size', pageSize);\n    let ref = this.database.ref(uri);\n    if (earliestEntryId) {\n      ref = ref.orderByKey().endAt(earliestEntryId);\n    }\n    // We're fetching an additional item as a cheap way to test if there is a next page.\n    return ref.limitToLast(pageSize + 1).once('value').then(data => {\n      const entries = data.val() || {};\n\n      // Figure out if there is a next page.\n      let nextPage = null;\n      const entryIds = Object.keys(entries);\n      if (entryIds.length > pageSize) {\n        delete entries[entryIds[0]];\n        const nextPageStartingId = entryIds.shift();\n        nextPage = () => this._getPaginatedFeed(\n            uri, pageSize, nextPageStartingId, fetchPostDetails);\n      }\n      if (fetchPostDetails) {\n        // Fetch details of all posts.\n        const queries = entryIds.map(postId => this.getPostData(postId));\n        // Since all the requests are being done one the same feed it's unlikely that a single one\n        // would fail and not the others so using Promise.all() is not so risky.\n        return Promise.all(queries).then(results => {\n          const deleteOps = [];\n          results.forEach(result => {\n            if (result.val()) {\n              entries[result.key] = result.val();\n            } else {\n              // We encountered a deleted post. Removing permanently from the feed.\n              delete entries[result.key];\n              deleteOps.push(this.deleteFromFeed(uri, result.key));\n            }\n          });\n          if (deleteOps.length > 0) {\n            // We had to remove some deleted posts from the feed. Lets run the query again to get\n            // the correct number of posts.\n            return this._getPaginatedFeed(uri, pageSize, earliestEntryId, fetchPostDetails);\n          }\n          return {entries: entries, nextPage: nextPage};\n        });\n      }\n      return {entries: entries, nextPage: nextPage};\n    });\n  }\n\n  /**\n   * Keeps the home feed populated with latest followed users' posts live.\n   */\n  startHomeFeedLiveUpdaters() {\n    // Make sure we listen on each followed people's posts.\n    const followingRef = this.database.ref(`/people/${this.auth.currentUser.uid}/following`);\n    this.firebaseRefs.push(followingRef);\n    followingRef.on('child_added', followingData => {\n      // Start listening the followed user's posts to populate the home feed.\n      const followedUid = followingData.key;\n      let followedUserPostsRef = this.database.ref(`/people/${followedUid}/posts`);\n      if (followingData.val() instanceof String) {\n        followedUserPostsRef = followedUserPostsRef.orderByKey().startAt(followingData.val());\n      }\n      this.firebaseRefs.push(followedUserPostsRef);\n      followedUserPostsRef.on('child_added', postData => {\n        if (postData.key !== followingData.val()) {\n          const updates = {};\n          updates[`/feed/${this.auth.currentUser.uid}/${postData.key}`] = true;\n          updates[`/people/${this.auth.currentUser.uid}/following/${followedUid}`] = postData.key;\n          this.database.ref().update(updates);\n        }\n      });\n    });\n    // Stop listening to users we unfollow.\n    followingRef.on('child_removed', followingData => {\n      // Stop listening the followed user's posts to populate the home feed.\n      const followedUserId = followingData.key;\n      this.database.ref(`/people/${followedUserId}/posts`).off();\n    });\n  }\n\n  /**\n   * Updates the home feed with new followed users' posts and returns a promise once that's done.\n   */\n  updateHomeFeeds() {\n    // Make sure we listen on each followed people's posts.\n    const followingRef = this.database.ref(`/people/${this.auth.currentUser.uid}/following`);\n    return followingRef.once('value', followingData => {\n      // Start listening the followed user's posts to populate the home feed.\n      const following = followingData.val();\n      if (!following) {\n        return;\n      }\n      const updateOperations = Object.keys(following).map(followedUid => {\n        let followedUserPostsRef = this.database.ref(`/people/${followedUid}/posts`);\n        const lastSyncedPostId = following[followedUid];\n        if (lastSyncedPostId instanceof String) {\n          followedUserPostsRef = followedUserPostsRef.orderByKey().startAt(lastSyncedPostId);\n        }\n        return followedUserPostsRef.once('value', postData => {\n          const updates = {};\n          if (!postData.val()) {\n            return;\n          }\n          Object.keys(postData.val()).forEach(postId => {\n            if (postId !== lastSyncedPostId) {\n              updates[`/feed/${this.auth.currentUser.uid}/${postId}`] = true;\n              updates[`/people/${this.auth.currentUser.uid}/following/${followedUid}`] = postId;\n            }\n          });\n          return this.database.ref().update(updates);\n        });\n      });\n      return Promise.all(updateOperations);\n    });\n  }\n\n  /**\n   * Returns the users which name match the given search query as a Promise.\n   */\n  searchUsers(searchString, maxResults) {\n    searchString = latinize(searchString).toLowerCase();\n    const query = this.database.ref('/people')\n        .orderByChild('_search_index/full_name').startAt(searchString)\n        .limitToFirst(maxResults).once('value');\n    const reversedQuery = this.database.ref('/people')\n        .orderByChild('_search_index/reversed_full_name').startAt(searchString)\n        .limitToFirst(maxResults).once('value');\n    return Promise.all([query, reversedQuery]).then(results => {\n      const people = {};\n      // construct people from the two search queries results.\n      results.forEach(result => result.forEach(data => {\n        people[data.key] = data.val();\n      }));\n\n      // Remove results that do not start with the search query.\n      const userIds = Object.keys(people);\n      userIds.forEach(userId => {\n        const name = people[userId]._search_index.full_name;\n        const reversedName = people[userId]._search_index.reversed_full_name;\n        if (!name.startsWith(searchString) && !reversedName.startsWith(searchString)) {\n          delete people[userId];\n        }\n      });\n      return people;\n    });\n  }\n\n  /**\n   * Saves or updates public user data in Firebase (such as image URL, display name...).\n   */\n  saveUserData(imageUrl, displayName) {\n    if (!displayName) {\n      displayName = 'Anonymous';\n    }\n    let searchFullName = displayName.toLowerCase();\n    let searchReversedFullName = searchFullName.split(' ').reverse().join(' ');\n    try {\n      searchFullName = latinize(searchFullName);\n      searchReversedFullName = latinize(searchReversedFullName);\n    } catch (e) {\n      console.error(e);\n    }\n\n    const updateData = {\n      profile_picture: imageUrl,\n      full_name: displayName,\n      _search_index: {\n        full_name: searchFullName,\n        reversed_full_name: searchReversedFullName\n      }\n    };\n    return this.database.ref(`people/${this.auth.currentUser.uid}`).update(updateData);\n  }\n\n  /**\n   * Fetches a single post data.\n   */\n  getPostData(postId) {\n    return this.database.ref(`/posts/${postId}`).once('value');\n  }\n\n  /**\n   * Subscribe to receive updates on a user's post like status.\n   */\n  registerToUserLike(postId, callback) {\n    // Load and listen to new Likes.\n    const likesRef = this.database.ref(`likes/${postId}/${this.auth.currentUser.uid}`);\n    likesRef.on('value', data => callback(!!data.val()));\n    this.firebaseRefs.push(likesRef);\n  }\n\n  /**\n   * Updates the like status of a post from the current user.\n   */\n  updateLike(postId, value) {\n    return this.database.ref(`likes/${postId}/${this.auth.currentUser.uid}`)\n        .set(value ? firebase.database.ServerValue.TIMESTAMP : null);\n  }\n\n  /**\n   * Adds a comment to a post.\n   */\n  addComment(postId, commentText) {\n    const commentObject = {\n      text: commentText,\n      timestamp: Date.now(),\n      author: {\n        uid: this.auth.currentUser.uid,\n        full_name: this.auth.currentUser.displayName,\n        profile_picture: this.auth.currentUser.photoURL\n      }\n    };\n    return this.database.ref(`comments/${postId}`).push(commentObject);\n  }\n\n  /**\n   * Uploads a new Picture to Firebase Storage and adds a new post referencing it.\n   * This returns a Promise which completes with the new Post ID.\n   */\n  uploadNewPic(pic, thumb, fileName, text) {\n    // Start the pic file upload to Firebase Storage.\n    const picRef = this.storage.ref(`${this.auth.currentUser.uid}/full/${Date.now()}/${fileName}`);\n    const metadata = {\n      contentType: pic.type\n    };\n    var picUploadTask = picRef.put(pic, metadata).then(snapshot => {\n      console.log('New pic uploaded. Size:', snapshot.totalBytes, 'bytes.');\n      var url = snapshot.metadata.downloadURLs[0];\n      console.log('File available at', url);\n      return url;\n    }).catch(error => {\n      console.error('Error while uploading new pic', error);\n    });\n\n    // Start the thumb file upload to Firebase Storage.\n    const thumbRef = this.storage.ref(`${this.auth.currentUser.uid}/thumb/${Date.now()}/${fileName}`);\n    var tumbUploadTask = thumbRef.put(thumb, metadata).then(snapshot => {\n      console.log('New thumb uploaded. Size:', snapshot.totalBytes, 'bytes.');\n      var url = snapshot.metadata.downloadURLs[0];\n      console.log('File available at', url);\n      return url;\n    }).catch(error => {\n      console.error('Error while uploading new thumb', error);\n    });\n\n    return Promise.all([picUploadTask, tumbUploadTask]).then(urls => {\n      // Once both pics and thumbanils has been uploaded add a new post in the Firebase Database and\n      // to its fanned out posts lists (user's posts and home post).\n      const newPostKey = this.database.ref('/posts').push().key;\n      const update = {};\n      update[`/posts/${newPostKey}`] = {\n        full_url: urls[0],\n        thumb_url: urls[1],\n        text: text,\n        timestamp: firebase.database.ServerValue.TIMESTAMP,\n        full_storage_uri: picRef.toString(),\n        thumb_storage_uri: thumbRef.toString(),\n        author: {\n          uid: this.auth.currentUser.uid,\n          full_name: this.auth.currentUser.displayName,\n          profile_picture: this.auth.currentUser.photoURL\n        }\n      };\n      update[`/people/${this.auth.currentUser.uid}/posts/${newPostKey}`] = true;\n      update[`/feed/${this.auth.currentUser.uid}/${newPostKey}`] = true;\n      return this.database.ref().update(update).then(() => newPostKey);\n    });\n  }\n\n  /**\n   * Follow/Unfollow a user and return a promise once that's done.\n   *\n   * If the user is now followed we'll add all his posts to the home feed of the follower.\n   * If the user is now not followed anymore all his posts are removed from the follower home feed.\n   */\n  toggleFollowUser(followedUserId, follow) {\n    // Add or remove posts to the user's home feed.\n    return this.database.ref(`/people/${followedUserId}/posts`).once('value').then(\n        data => {\n          const updateData = {};\n          let lastPostId = true;\n\n          // Add followed user's posts to the home feed.\n          data.forEach(post => {\n            updateData[`/feed/${this.auth.currentUser.uid}/${post.key}`] = follow ? !!follow : null;\n            lastPostId = post.key;\n          });\n\n          // Add followed user to the 'following' list.\n          updateData[`/people/${this.auth.currentUser.uid}/following/${followedUserId}`] =\n              follow ? lastPostId : null;\n\n          // Add signed-in suer to the list of followers.\n          updateData[`/followers/${followedUserId}/${this.auth.currentUser.uid}`] =\n              follow ? !!follow : null;\n          return this.database.ref().update(updateData);\n        });\n  }\n\n  /**\n   * Listens to updates on the followed status of the given user.\n   */\n  registerToFollowStatusUpdate(userId, callback) {\n    const followStatusRef =\n        this.database.ref(`/people/${this.auth.currentUser.uid}/following/${userId}`);\n    followStatusRef.on('value', callback);\n    this.firebaseRefs.push(followStatusRef);\n  }\n\n  /**\n   * Load a single user profile information\n   */\n  loadUserProfile(uid) {\n    return this.database.ref(`/people/${uid}`).once('value');\n  }\n\n  /**\n   * Listens to updates on the likes of a post and calls the callback with likes counts.\n   * TODO: This won't scale if a user has a huge amount of likes. We need to keep track of a\n   *       likes count instead.\n   */\n  registerForLikesCount(postId, likesCallback) {\n    const likesRef = this.database.ref(`/likes/${postId}`);\n    likesRef.on('value', data => likesCallback(data.numChildren()));\n    this.firebaseRefs.push(likesRef);\n  }\n\n  /**\n   * Listens to updates on the comments of a post and calls the callback with comments counts.\n   */\n  registerForCommentsCount(postId, commentsCallback) {\n    const commentsRef = this.database.ref(`/comments/${postId}`);\n    commentsRef.on('value', data => commentsCallback(data.numChildren()));\n    this.firebaseRefs.push(commentsRef);\n  }\n\n  /**\n   * Listens to updates on the followers of a person and calls the callback with followers counts.\n   * TODO: This won't scale if a user has a huge amount of followers. We need to keep track of a\n   *       follower count instead.\n   */\n  registerForFollowersCount(uid, followersCallback) {\n    const followersRef = this.database.ref(`/followers/${uid}`);\n    followersRef.on('value', data => followersCallback(data.numChildren()));\n    this.firebaseRefs.push(followersRef);\n  }\n\n  /**\n   * Listens to updates on the followed people of a person and calls the callback with its count.\n   */\n  registerForFollowingCount(uid, followingCallback) {\n    const followingRef = this.database.ref(`/people/${uid}/following`);\n    followingRef.on('value', data => followingCallback(data.numChildren()));\n    this.firebaseRefs.push(followingRef);\n  }\n\n  /**\n   * Fetch the list of followed people's profile.\n   */\n  getFollowingProfiles(uid) {\n    return this.database.ref(`/people/${uid}/following`).once('value').then(data => {\n      if (data.val()) {\n        const followingUids = Object.keys(data.val());\n        const fetchProfileDetailsOperations = followingUids.map(\n          followingUid => this.loadUserProfile(followingUid));\n        return Promise.all(fetchProfileDetailsOperations).then(results => {\n          const profiles = {};\n          results.forEach(result => {\n            if (result.val()) {\n              profiles[result.key] = result.val();\n            }\n          });\n          return profiles;\n        });\n      }\n      return {};\n    });\n  }\n\n  /**\n   * Listens to updates on the user's posts and calls the callback with user posts counts.\n   */\n  registerForPostsCount(uid, postsCallback) {\n    const userPostsRef = this.database.ref(`/people/${uid}/posts`);\n    userPostsRef.on('value', data => postsCallback(data.numChildren()));\n    this.firebaseRefs.push(userPostsRef);\n  }\n\n  /**\n   * Deletes the given post from the global post feed and the user's post feed. Also deletes\n   * comments, likes and the file on Firebase Storage.\n   */\n  deletePost(postId, picStorageUri, thumbStorageUri) {\n    console.log(`Deleting ${postId}`);\n    const updateObj = {};\n    updateObj[`/people/${this.auth.currentUser.uid}/posts/${postId}`] = null;\n    updateObj[`/comments/${postId}`] = null;\n    updateObj[`/likes/${postId}`] = null;\n    updateObj[`/posts/${postId}`] = null;\n    updateObj[`/feed/${this.auth.currentUser.uid}/${postId}`] = null;\n    const deleteFromDatabase = this.database.ref().update(updateObj);\n    if (picStorageUri) {\n      const deletePicFromStorage = this.storage.refFromURL(picStorageUri).delete();\n      const deleteThumbFromStorage = this.storage.refFromURL(thumbStorageUri).delete();\n      return Promise.all([deleteFromDatabase, deletePicFromStorage, deleteThumbFromStorage]);\n    }\n    return deleteFromDatabase;\n  }\n\n  /**\n   * Deletes the given postId entry from the user's home feed.\n   */\n  deleteFromFeed(uri, postId) {\n    return this.database.ref(`${uri}/${postId}`).remove();\n  }\n\n  /**\n   * Listens to deletions on posts from the global feed.\n   */\n  registerForPostsDeletion(deletionCallback) {\n    const postsRef = this.database.ref(`/posts`);\n    postsRef.on('child_removed', data => deletionCallback(data.key));\n    this.firebaseRefs.push(postsRef);\n  }\n};\n\nfriendlyPix.firebase = new friendlyPix.Firebase();\n"]}