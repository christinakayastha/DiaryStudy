{"version":3,"sources":["../scripts/utils.js"],"names":["window","friendlyPix","MaterialUtils","refreshSwitchState","element","jQuery","MaterialSwitch","checkDisabled","checkToggleState","closeDrawer","drawerObfuscator","$","hasClass","click","clearTextField","value","parentElement","MaterialTextfield","boundUpdateClassesHandler","upgradeTextFields","componentHandler","upgradeElements","get","onEndScroll","offset","resolver","Deferred","mdlLayoutElement","scroll","innerHeight","scrollTop","prop","console","log","unbind","resolve","promise","stopOnEndScrolls"],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA;;AAEAA,OAAOC,WAAP,GAAqBD,OAAOC,WAAP,IAAsB,EAA3C;;AAEA;;;AAGAA,YAAYC,aAAZ,GAA4B,MAAM;;AAEhC;;;AAGA,SAAOC,kBAAP,CAA0BC,OAA1B,EAAmC;AACjC,QAAIA,mBAAmBC,MAAvB,EAA+B;AAC7BD,gBAAUA,QAAQ,CAAR,CAAV;AACD;AACD,QAAIA,QAAQE,cAAZ,EAA4B;AAC1BF,cAAQE,cAAR,CAAuBC,aAAvB;AACAH,cAAQE,cAAR,CAAuBE,gBAAvB;AACD;AACF;;AAED;;;AAGA,SAAOC,WAAP,GAAqB;AACnB,UAAMC,mBAAmBC,EAAE,yBAAF,CAAzB;AACA,QAAID,iBAAiBE,QAAjB,CAA0B,YAA1B,CAAJ,EAA6C;AAC3CF,uBAAiBG,KAAjB;AACD;AACF;;AAED;;;AAGA,SAAOC,cAAP,CAAsBV,OAAtB,EAA+B;AAC7BA,YAAQW,KAAR,GAAgB,EAAhB;AACAX,YAAQY,aAAR,CAAsBC,iBAAtB,CAAwCC,yBAAxC;AACD;;AAED;;;AAGA,SAAOC,iBAAP,CAAyBf,OAAzB,EAAkC;AAChCgB,qBAAiBC,eAAjB,CAAiCV,EAAE,gBAAF,EAAoBP,OAApB,EAA6BkB,GAA7B,EAAjC;AACD;;AAED;;;;;;AAMA,SAAOC,WAAP,CAAmBC,SAAS,CAA5B,EAA+B;AAC7B,UAAMC,WAAW,IAAId,EAAEe,QAAN,EAAjB;AACA,UAAMC,mBAAmBhB,EAAE,aAAF,CAAzB;AACAgB,qBAAiBC,MAAjB,CAAwB,MAAM;AAC5B,UAAK5B,OAAO6B,WAAP,GAAqBF,iBAAiBG,SAAjB,EAArB,GAAoDN,MAArD;AACAG,uBAAiBI,IAAjB,CAAsB,cAAtB,CADJ,EAC2C;AACzCC,gBAAQC,GAAR,CAAY,qBAAZ;AACAN,yBAAiBO,MAAjB,CAAwB,QAAxB;AACAT,iBAASU,OAAT;AACD;AACF,KAPD;AAQAH,YAAQC,GAAR,CAAY,8BAAZ;AACA,WAAOR,SAASW,OAAT,EAAP;AACD;;AAED;;;AAGA,SAAOC,gBAAP,GAA0B;AACxB,UAAMV,mBAAmBhB,EAAE,aAAF,CAAzB;AACAgB,qBAAiBO,MAAjB,CAAwB,QAAxB;AACD,GAnE+B,CAAlC","file":"utils.js","sourcesContent":["/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nwindow.friendlyPix = window.friendlyPix || {};\n\n/**\n * Set of utilities to handle Material Design Lite elements.\n */\nfriendlyPix.MaterialUtils = class {\n\n  /**\n   * Refreshes the UI state of the given Material Design Checkbox / Switch element.\n   */\n  static refreshSwitchState(element) {\n    if (element instanceof jQuery) {\n      element = element[0];\n    }\n    if (element.MaterialSwitch) {\n      element.MaterialSwitch.checkDisabled();\n      element.MaterialSwitch.checkToggleState();\n    }\n  }\n\n  /**\n   * Closes the drawer if it is open.\n   */\n  static closeDrawer() {\n    const drawerObfuscator = $('.mdl-layout__obfuscator');\n    if (drawerObfuscator.hasClass('is-visible')) {\n      drawerObfuscator.click();\n    }\n  }\n\n  /**\n   * Clears the given Material Text Field.\n   */\n  static clearTextField(element) {\n    element.value = '';\n    element.parentElement.MaterialTextfield.boundUpdateClassesHandler();\n  }\n\n  /**\n   * Upgrades the text fields in the element.\n   */\n  static upgradeTextFields(element) {\n    componentHandler.upgradeElements($('.mdl-textfield', element).get());\n  }\n\n  /**\n   * Returns a Promise which resolves when the user has reached the bottom of the page while\n   * scrolling.\n   * If an `offset` is specified the promise will resolve before reaching the bottom of\n   * the page by the given amount offset in pixels.\n   */\n  static onEndScroll(offset = 0) {\n    const resolver = new $.Deferred();\n    const mdlLayoutElement = $('.mdl-layout');\n    mdlLayoutElement.scroll(() => {\n      if ((window.innerHeight + mdlLayoutElement.scrollTop() + offset) >=\n          mdlLayoutElement.prop('scrollHeight')) {\n        console.log('Scroll End Reached!');\n        mdlLayoutElement.unbind('scroll');\n        resolver.resolve();\n      }\n    });\n    console.log('Now watching for Scroll End.');\n    return resolver.promise();\n  }\n\n  /**\n   * Stops scroll listeners.\n   */\n  static stopOnEndScrolls() {\n    const mdlLayoutElement = $('.mdl-layout');\n    mdlLayoutElement.unbind('scroll');\n  }\n};\n"]}